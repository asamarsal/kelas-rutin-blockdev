{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_30-11ef21abaed403a5463de41c1d7e65243ba87c81",
  "solcVersion": "0.8.30",
  "solcLongVersion": "0.8.30+commit.73712a01",
  "userSourceNameMap": {
    "contracts/LiskGarden.sol": "project/contracts/LiskGarden.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "prague",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/LiskGarden.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.30;\r\n\r\ncontract LiskGarden {\r\n\r\n    // ============================================\r\n    // BAGIAN 1: ENUM & STRUCT\r\n    // ============================================\r\n    // TODO 1.1: Buat enum GrowthStage dengan 4 nilai:\r\n    // SEED, SPROUT, GROWING, BLOOMING\r\n    enum GrowthStage {\r\n        SEED,      // 0\r\n        SPROUT,    // 1\r\n        GROWING,   // 2\r\n        BLOOMING   // 3\r\n    }\r\n\r\n    // TODO 1.2: Buat struct Plant dengan 8 fields:\r\n    // - uint256 id\r\n    // - address owner\r\n    // - GrowthStage stage\r\n    // - uint256 plantedDate\r\n    // - uint256 lastWatered\r\n    // - uint8 waterLevel\r\n    // - bool exists\r\n    // - bool isDead\r\n    struct Plant {\r\n        uint256 id;\r\n        address owner;  \r\n        GrowthStage stage;\r\n        uint256 plantedDate;\r\n        uint256 lastWatered;\r\n        uint8 waterLevel;\r\n        bool exists;\r\n        bool isDead;\r\n    }\r\n\r\n    // ============================================\r\n    // BAGIAN 2: STATE VARIABLES\r\n    // ============================================\r\n    // TODO 2.1: Mapping plantId ke Plant\r\n    // Hint: mapping(uint256 => Plant) public plants;\r\n    mapping(uint256 => Plant) public plants;\r\n\r\n    // TODO 2.2: Mapping address ke array plantId (track tanaman user)\r\n    // Hint: mapping(address => uint256[]) public userPlants;\r\n    mapping(address => uint256[]) public userPlants;\r\n\r\n    // TODO 2.3: Counter untuk ID tanaman baru\r\n    // Hint: uint256 public plantCounter;\r\n    uint256 public plantCounter;\r\n\r\n    // TODO 2.4: Address owner contract\r\n    // Hint: address public owner;\r\n    address public owner;\r\n\r\n    // ============================================\r\n    // BAGIAN 3: CONSTANTS (Game Parameters)\r\n    // ============================================\r\n    // TODO 3.1: Harga tanam = 0.001 ether\r\n    // Hint: uint256 public constant PLANT_PRICE = 0.001 ether;\r\n    uint256 public constant PLANT_PRICE = 0.001 ether;\r\n\r\n    // TODO 3.2: Reward panen = 0.003 ether\r\n    uint256 public constant HARVEST_REWARD = 0.003 ether;\r\n\r\n    // TODO 3.3: Durasi per stage = 1 menit\r\n    // Hint: uint256 public constant STAGE_DURATION = 1 minutes;\r\n    uint256 public constant STAGE_DURATION = 1 minutes;\r\n\r\n    // TODO 3.4: Waktu deplesi air = 30 detik\r\n    uint256 public constant WATER_DEPLETION_TIME = 30 seconds;\r\n\r\n    // TODO 3.5: Rate deplesi = 2 (2% setiap interval)\r\n    // Hint: uint8 public constant WATER_DEPLETION_RATE = 2;\r\n    uint8 public constant WATER_DEPLETION_RATE = 2;\r\n\r\n    // ============================================\r\n    // BAGIAN 4: EVENTS\r\n    // ============================================\r\n    // TODO 4.1: Event PlantSeeded(address indexed owner, uint256 indexed plantId)\r\n    event PlantSeeded(address indexed owner, uint256 indexed plantId);\r\n\r\n    // TODO 4.2: Event PlantWatered(uint256 indexed plantId, uint8 newWaterLevel)\r\n    event PlantWatered(uint256 indexed plantId, uint8 newWaterLevel);\r\n\r\n    // TODO 4.3: Event PlantHarvested(uint256 indexed plantId, address indexed owner, uint256 reward)\r\n    event PlantHarvested(uint256 indexed plantId, address indexed owner, uint256 reward);\r\n\r\n    // TODO 4.4: Event StageAdvanced(uint256 indexed plantId, GrowthStage newStage)\r\n    event StageAdvanced(uint256 indexed plantId, GrowthStage newStage);\r\n\r\n    // TODO 4.5: Event PlantDied(uint256 indexed plantId)\r\n    event PlantDied(uint256 indexed plantId);\r\n\r\n    // ============================================\r\n    // BAGIAN 5: CONSTRUCTOR\r\n    // ============================================\r\n    // TODO 5: Set owner = msg.sender\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    // ============================================\r\n    // BAGIAN 6: PLANT SEED (Fungsi Utama #1)\r\n    // ============================================\r\n    // TODO 6: Lengkapi fungsi plantSeed\r\n    // Tipe: external payable, returns uint256\r\n    // Steps:\r\n    // 1. require msg.value >= PLANT_PRICE\r\n    // 2. Increment plantCounter\r\n    // 3. Buat Plant baru dengan struct\r\n    // 4. Simpan ke mapping plants\r\n    // 5. Push plantId ke userPlants\r\n    // 6. Emit PlantSeeded\r\n    // 7. Return plantId\r\n\r\n    function plantSeed() external payable returns (uint256) {\r\n        // TODO: Implement fungsi ini\r\n        // Hint: Lihat spesifikasi di atas!\r\n        //1.\r\n        require(msg.value >= PLANT_PRICE, \"Insufficient payment\");\r\n\r\n        //2.\r\n        plantCounter++;\r\n\r\n        //3.\r\n        Plant memory newPlant = Plant({\r\n            id: plantCounter,\r\n            owner: msg.sender,\r\n            stage: GrowthStage.SEED,\r\n            plantedDate: block.timestamp,\r\n            lastWatered: block.timestamp,\r\n            waterLevel: 100,\r\n            exists: true,\r\n            isDead: false\r\n        });\r\n\r\n        //4.\r\n        plants[plantCounter] = newPlant;\r\n\r\n        //5.\r\n        userPlants[msg.sender].push(plantCounter);\r\n\r\n        //6.\r\n        emit PlantSeeded(msg.sender, plantCounter);\r\n\r\n        //7.\r\n        return plantCounter;\r\n\r\n    }\r\n\r\n    // ============================================\r\n    // BAGIAN 7: WATER SYSTEM (3 Fungsi)\r\n    // ============================================\r\n\r\n    // TODO 7.1: calculateWaterLevel (public view returns uint8)\r\n    // Steps:\r\n    // 1. Ambil plant dari storage\r\n    // 2. Jika !exists atau isDead, return 0\r\n    // 3. Hitung timeSinceWatered = block.timestamp - lastWatered\r\n    // 4. Hitung depletionIntervals = timeSinceWatered / WATER_DEPLETION_TIME\r\n    // 5. Hitung waterLost = depletionIntervals * WATER_DEPLETION_RATE\r\n    // 6. Jika waterLost >= waterLevel, return 0\r\n    // 7. Return waterLevel - waterLost\r\n\r\n    function calculateWaterLevel(uint256 plantId) public view returns (uint8) {\r\n        // TODO: Implement\r\n        //1.\r\n        Plant storage plant = plants[plantId];\r\n\r\n        //2.\r\n        if (!exists(plantId) || plant.isDead) {\r\n            return 0;\r\n        }\r\n\r\n        //3.\r\n        uint256 timeSinceWatered = block.timestamp - plant.lastWatered;\r\n\r\n        //4.\r\n        uint256 depletionIntervals = timeSinceWatered / WATER_DEPLETION_TIME;\r\n\r\n        //5.\r\n        uint8 waterLost = uint8(depletionIntervals * WATER_DEPLETION_RATE);\r\n\r\n        //6.\r\n        if (waterLost >= plant.waterLevel) {\r\n            return 0;\r\n\r\n        }\r\n\r\n        //7.\r\n        return plant.waterLevel - waterLost;\r\n    }\r\n\r\n    // TODO 7.2: updateWaterLevel (internal)\r\n    // Steps:\r\n    // 1. Ambil plant dari storage\r\n    // 2. Hitung currentWater dengan calculateWaterLevel\r\n    // 3. Update plant.waterLevel\r\n    // 4. Jika currentWater == 0 && !isDead, set isDead = true dan emit PlantDied\r\n\r\n    function updateWaterLevel(uint256 plantId) internal {\r\n        // TODO: Implement\r\n        //1.\r\n        Plant storage plant = plants[plantId];\r\n\r\n        //2.\r\n        uint8 currentWater = calculateWaterLevel(plantId);\r\n\r\n        //3.\r\n        plant.waterLevel = currentWater;\r\n\r\n        //4.\r\n        if (currentWater == 0 && !plant.isDead) {\r\n            plant.isDead = true;\r\n            emit PlantDied(plantId);\r\n        }\r\n\r\n    }\r\n\r\n    // TODO 7.3: waterPlant (external)\r\n    // Steps:\r\n    // 1. require exists\r\n    // 2. require owner == msg.sender\r\n    // 3. require !isDead\r\n    // 4. Set waterLevel = 100\r\n    // 5. Set lastWatered = block.timestamp\r\n    // 6. Emit PlantWatered\r\n    // 7. Call updatePlantStage\r\n\r\n    function waterPlant(uint256 plantId) external {\r\n        // TODO: Implement\r\n        //1.\r\n        require(exists(plantId), \"Plant Doesnt Exist\");\r\n\r\n        //2.\r\n        require(plants[plantId].owner == msg.sender, \"Not Owner\");\r\n\r\n        //3.\r\n        require(!plants[plantId].isDead, \"Plant is dead\");\r\n\r\n        //Get plant from storage\r\n        Plant storage plant = plants[plantId];\r\n\r\n        //4.\r\n        plant.waterLevel = 100;\r\n\r\n        //5.\r\n        plant.lastWatered = block.timestamp;\r\n\r\n        //6.\r\n        emit PlantWatered(plantId, 100);\r\n\r\n        //7.\r\n        updatePlantStage(plantId);\r\n        }\r\n\r\n    // ============================================\r\n    // BAGIAN 8: STAGE & HARVEST (2 Fungsi)\r\n    // ============================================\r\n\r\n    // TODO 8.1: updatePlantStage (public)\r\n    // Steps:\r\n    // 1. require exists\r\n    // 2. Call updateWaterLevel\r\n    // 3. Jika isDead, return\r\n    // 4. Hitung timeSincePlanted\r\n    // 5. Simpan oldStage\r\n    // 6. Update stage berdasarkan waktu (3 if statements)\r\n    // 7. Jika stage berubah, emit StageAdvanced\r\n\r\n    function updatePlantStage(uint256 plantId) public {\r\n        // TODO: Implement\r\n        //1.\r\n        require(exists(plantId), \"Plant Doesnt Exist\");\r\n\r\n        //2.\r\n        updateWaterLevel(plantId);\r\n\r\n        //Get plant from storage\r\n        Plant storage plant = plants[plantId];\r\n\r\n        //3.\r\n        if (plant.isDead) {\r\n            return;\r\n        }\r\n\r\n        //4.\r\n        uint256 timeSincePlanted = block.timestamp - plant.plantedDate;\r\n\r\n        //5.\r\n        GrowthStage oldStage = plant.stage;\r\n\r\n        //6.\r\n        if (timeSincePlanted < STAGE_DURATION) {\r\n            plant.stage = GrowthStage.SEED;\r\n        } else if (timeSincePlanted < STAGE_DURATION * 2) {\r\n            plant.stage = GrowthStage.SPROUT;\r\n        } else if (timeSincePlanted < STAGE_DURATION * 3) {\r\n            plant.stage = GrowthStage.GROWING;\r\n        } else {\r\n            plant.stage = GrowthStage.BLOOMING;\r\n        }\r\n\r\n        //7.\r\n        if (oldStage != plant.stage) {\r\n            emit StageAdvanced(plantId, plant.stage);\r\n        }\r\n\r\n    }\r\n\r\n    // TODO 8.2: harvestPlant (external)\r\n    // Steps:\r\n    // 1. require exists\r\n    // 2. require owner\r\n    // 3. require !isDead\r\n    // 4. Call updatePlantStage\r\n    // 5. require stage == BLOOMING\r\n    // 6. Set exists = false\r\n    // 7. Emit PlantHarvested\r\n    // 8. Transfer HARVEST_REWARD dengan .call\r\n    // 9. require success\r\n\r\n    function harvestPlant(uint256 plantId) external {\r\n        require(exists(plantId), \"Plant does not exist\");\r\n\r\n        Plant storage plant = plants[plantId];\r\n        require(plant.owner == msg.sender, \"Not the plant owner\");\r\n        require(!plant.isDead, \"Plant is dead\");\r\n\r\n        updatePlantStage(plantId);\r\n        require(plant.stage == GrowthStage.BLOOMING, \"Plant not ready for harvest\");\r\n\r\n        plant.exists = false;\r\n        emit PlantHarvested(plantId, msg.sender, HARVEST_REWARD);\r\n\r\n        (bool success, ) = msg.sender.call{value: HARVEST_REWARD}(\"\");\r\n        require(success, \"Transfer failed\");\r\n    }\r\n\r\n    // ============================================\r\n    // HELPER FUNCTIONS (Sudah Lengkap)\r\n    // ============================================\r\n\r\n    function getPlant(uint256 plantId) external view returns (Plant memory) {\r\n        Plant memory plant = plants[plantId];\r\n        plant.waterLevel = calculateWaterLevel(plantId);\r\n        return plant;\r\n    }\r\n\r\n    function exists(uint256 plantId) public view returns (bool) {\r\n        return plants[plantId].exists;\r\n    }\r\n\r\n    function getUserPlants(address user) external view returns (uint256[] memory) {\r\n        return userPlants[user];\r\n    }\r\n\r\n    function withdraw() external {\r\n        require(msg.sender == owner, \"Bukan owner\");\r\n        (bool success, ) = owner.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer gagal\");\r\n    }\r\n    \r\n\r\n    receive() external payable {}\r\n}"
      }
    }
  }
}